import arcpy

class ChangeSymbologyTool(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Change Symbology"
        self.description = "Change the symbology of a layer."
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions."""
        layer_name = arcpy.Parameter(
            displayName="Layer Name",
            name="layer_name",
            datatype="GPString",
            parameterType="Required",
            direction="Input"
        )
        
        output_layer = arcpy.Parameter(
            displayName="Output Layer",
            name="output_layer",
            datatype="GPFeatureLayer",
            parameterType="Derived",
            direction="Output"
        )
        output_layer.parameterDependencies = [layer_name.name]
        
        return [layer_name, output_layer]

    def execute(self, parameters, messages):
        """The source code of the tool."""
        layer_name = parameters[0].valueAsText

        # Get the current project
        p = arcpy.mp.ArcGISProject("CURRENT")

        # Specify the layer in the map
        m = p.listMaps()[0]  # Assuming there's only one map in the project
        lyr = m.listLayers(layer_name)[0]

        # Access symbology and change it
        sym = lyr.symbology
        sym.updateRenderer('GraduatedColorsRenderer')
        sym.renderer.classificationField = 'value'
        sym.classificationMethod = 'NaturalBreaks'
        sym.renderer.breakCount = 10

        # Save symbology back onto layer
        lyr.symbology = sym

        # Save project
        p.save()

        # Return the modified layer as output
        parameters[1].value = lyr

        return
